[{"title":"Lottie动画库实践小记","date":"2017-02-08T14:22:14.000Z","path":"2017/02/08/Lottie动画库实践小记/","text":"前言_(:3」∠)_ 好紧张，第一次写文章，2017年开工之前收到一篇推送，这个项目碉堡了。在感叹这个动画库碉堡之余，也想起自己在玩AE（After Effects）的时候也有类似的想法“在AE上编辑的动画直接能再程序用该多啊”。因为笔者之前有关注过motion动画,在AE上做过一些动画，正好可以作为demo，下面就是笔者实践过程。(笑) 安装bodymovin下载bodymovin官方描述是一款能够将AE动画导出为svg/canvas/html+js的AE插件。同时它还可以导出描述AE动画的json文件。官方提供了三种安装方法： 使用第三方安装器ZXP installer安装（推荐） 手动安装 使用Adobe官方安装器Adobe Extension Manager安装 注意，目前bodymovin的最新版本为V 4.5.4使用安装器安装只能安装在AE CC 2014、AE CC 2015上，否则会失败。手动安装则可以在AE CC 2014、AE CC 2015、AE CC 2017甚至绿色版上生效。 下面介绍一下手动安装： 关闭AE； 使用zip解压软件解压bodymovin.zxp文件到adobe的CEP文件夹上；WINDOWS:C:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions orC:\\AppData\\Roaming\\Adobe\\CEP\\extensionsMAC:/Library/Application\\ Support/Adobe/CEP/extensions/bodymovin 编辑注册表；WINDOWS:打开注册表编辑HKEY_CURRENT_USER/Software/Adobe/CSXS.6 并添加一个字符串类型的键名为PlayerDebugMode，并把值设为1.MAC:打开文件~/Library/Preferences/com.adobe.CSXS.6.plist并添加一行字符串类型的键名为PlayerDebugMode，并把值设为1. 最后， 无论以哪种方式安装bodymovin插件,都要在AE的编辑&gt; 首选项&gt; 常规中勾选&quot;允许脚本写入文件和访问网络&quot;。 如何使用After Effects 打开你的AE工程并在窗口&gt; 扩展&gt; bodymovin单击bodymovin； 这时会弹出一个活动面板； 在活动面板上, 单击Refresh按钮获得你的工程合成列表； 选择你想要导出的合成； 选择你想输出的文件夹； 单击Render按钮； 查看导出的json文件 (如果你有图片或者AI图层在你的动画里，同时也会导出相应imags文件夹) LottieLottie 支持 Jellybean (API 16) 及以上版本。 将依赖添加到你的工程文件 build.gradle 上 123dependencies &#123; compile 'com.airbnb.android:lottie:1.0.1'&#125; 最简单的使用方法就是在布局文件中添加 LottieAnimationView: 1234567&lt;com.airbnb.lottie.LottieAnimationView android:id=\"@+id/animation_view\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" app:lottie_fileName=\"hello-world.json\" app:lottie_loop=\"true\" app:lottie_autoPlay=\"true\" /&gt; 或者你也可以在程序中初始化并在app/src/main/assets中加载json文件：123LottieAnimationView animationView = (LottieAnimationView) findViewById(R.id.animation_view);animationView.setAnimation(\"hello-world.json\");animationView.loop(true); Lottie也可以支持从网络加载json动画文件：123456LottieAnimationView animationView = (LottieAnimationView) findViewById(R.id.animation_view);...LottieComposition composition = LottieComposition.fromJson(getResources(), jsonObject, (composition) -&gt; &#123; animationView.setComposition(composition); animationView.playAnimation();&#125;); 你也可以控制这些动画或者添加监听器：1234567891011121314151617181920animationView.addAnimatorUpdateListener((animation) -&gt; &#123; // Do something.&#125;);animationView.playAnimation();...if (animationView.isAnimating()) &#123; // Do something.&#125;...animationView.setProgress(0.5f);...// Custom animation speed or duration.ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f) .setDuration(500);animator.addUpdateListener(animation -&gt; &#123; animationView.setProgress(animation.getAnimatedValue());&#125;);animator.start();...animationView.cancelAnimation(); 在底层， LottieAnimationView 使用了LottieDrawable 来渲染这些动画。如果你需要，也可以直接使用LottieDrawable类。1234LottieDrawable drawable = new LottieDrawable();LottieComposition.fromAssetFileName(getContext(), \"hello-world.json\", (composition) -&gt; &#123; drawable.setComposition(composition);&#125;); 如果你的动画会经常重用,LottieAnimationView内置了一个可选的缓存策略。使用LottieAnimationView#setAnimation(String, CacheStrategy). CacheStrategy可以为Strong,Weak或者None,来决定LottieAnimationView对动画的引用类型为强引用或弱引用。 已支持的After Effects动画特性Keyframe Interpolation→ 关键帧插值器 Linear Interpolation→ 线性插值 Bezier Interpolation→ 贝塞尔插值 Hold Interpolation→ 保持插值 Rove Across Time Spatial Bezier → 空间贝塞尔 Solids→ 固态层 Transform Anchor Point→ 变换锚点 Transform Position → 变换位置 Transform Scale→ 变换缩放 Transform Rotation→ 变换旋转 Transform Opacity→ 变换透明度 Masks→ 遮罩 Path→ 路径 Opacity→ 透明度 Multiple Masks (additive)→ 多遮罩 （相加模式） Track Mattes→ 轨道蒙版 Alpha Matte→ Alpha蒙版 Parenting→ 父级 Multiple Parenting→多重父级 Nulls→空对象 Shape Layers→形状图层 Anchor Point→锚点 Position→位置 Scale→缩放 Rotation→旋转 Opacity→透明度 Path→路径 Group Transforms (Anchor point, position, scale etc)→变换组（锚点，位置，缩放等） Rectangle (All properties)→矩形（所有属性） Elipse (All properties)→椭圆（所有属性） Multiple paths in one group Stroke (shape layer)→描边（形状图层） Stroke Color→描边颜色 Stroke Opacity→描边透明度 Stroke Width→描边宽度 Line Cap→线头 Dashes→破折号 Fill (shape layer)→填充（形状图层） Fill Color→颜色 Fill Opacity→透明度 Trim Paths (shape layer)→修剪路径（形状图层） Trim Paths Start→开始 Trim Paths End→结束 Trim Paths Offset→偏移最后，下面是笔者实现的动画：","tags":[{"name":"android","slug":"android","permalink":"https://winkstu.github.io/tags/android/"},{"name":"after effects","slug":"after-effects","permalink":"https://winkstu.github.io/tags/after-effects/"}]},{"title":"Hello World","date":"2016-08-30T13:57:26.118Z","path":"2016/08/30/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]