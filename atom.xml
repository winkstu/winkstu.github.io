<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wink.stu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-09T13:25:50.117Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wink.stu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Lottie动画库实践小记</title>
    <link href="http://yoursite.com/2017/02/08/Lottie%E5%8A%A8%E7%94%BB%E5%BA%93%E5%AE%9E%E8%B7%B5%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/02/08/Lottie动画库实践小记/</id>
    <published>2017-02-08T14:22:14.000Z</published>
    <updated>2017-02-09T13:25:50.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>_(:3」∠)_</code>  好紧张，第一次写文章，2017年开工之前收到一篇推送，<a href="http://mp.weixin.qq.com/s/kMY_QZOR6njO9nLk_ZC6dA" target="_blank" rel="external">这个项目碉堡了</a>。在感叹这个动画库碉堡之余，也想起自己在玩AE（After Effects）的时候也有类似的想法“在AE上编辑的动画直接能再程序用该多啊”。因为笔者之前有关注过motion动画,在AE上做过一些动画，正好可以作为demo，下面就是笔者实践过程。<code>(笑)</code></p>
<a id="more"></a>
<h2 id="安装bodymovin"><a href="#安装bodymovin" class="headerlink" title="安装bodymovin"></a>安装<a href="https://github.com/bodymovin/bodymovin" target="_blank" rel="external">bodymovin</a></h2><p><a href="https://github.com/bodymovin/bodymovin/blob/master/build/extension/bodymovin.zxp" target="_blank" rel="external">下载</a><br>bodymovin官方描述是一款能够将AE动画导出为svg/canvas/html+js的AE插件。同时它还可以导出描述AE动画的json文件。官方提供了三种安装方法：</p>
<ol>
<li>使用第三方安装器<a href="http://aescripts.com/learn/zxp-installer/" target="_blank" rel="external">ZXP installer</a>安装（推荐）</li>
<li>手动安装</li>
<li>使用Adobe官方安装器Adobe Extension Manager安装</li>
</ol>
<blockquote>
<p>注意，目前bodymovin的最新版本为<code>V 4.5.4</code>使用安装器安装只能安装在AE CC 2014、AE CC 2015上，否则会失败。手动安装则可以在AE CC 2014、AE CC 2015、AE CC 2017甚至绿色版上生效。</p>
</blockquote>
<p>下面介绍一下手动安装：</p>
<ol>
<li>关闭AE；</li>
<li><p>使用zip解压软件解压bodymovin.zxp文件到adobe的CEP文件夹上；<br>WINDOWS:<br>C:\Program Files (x86)\Common Files\Adobe\CEP\extensions or<br>C:<username>\AppData\Roaming\Adobe\CEP\extensions<br>MAC:<br>/Library/Application\ Support/Adobe/CEP/extensions/bodymovin</username></p>
</li>
<li><p>编辑注册表；<br>WINDOWS:<br>打开注册表编辑<code>HKEY_CURRENT_USER/Software/Adobe/CSXS.6</code> 并添加一个字符串类型的键名为<code>PlayerDebugMode</code>，并把值设为<code>1</code>.<br>MAC:<br>打开文件<code>~/Library/Preferences/com.adobe.CSXS.6.plist</code>并添加一行字符串类型的键名为<code>PlayerDebugMode</code>，并把值设为<code>1</code>.</p>
</li>
</ol>
<p>最后， 无论以哪种方式安装bodymovin插件,都要在AE的<code>编辑&gt; 首选项&gt; 常规</code>中勾选<code>&quot;允许脚本写入文件和访问网络&quot;</code>。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="After-Effects"><a href="#After-Effects" class="headerlink" title="After Effects"></a>After Effects</h3><ul>
<li>打开你的AE工程并在<code>窗口&gt; 扩展&gt; bodymovin</code>单击bodymovin；</li>
<li>这时会弹出一个活动面板；</li>
<li>在活动面板上, 单击<code>Refresh</code>按钮获得你的工程合成列表；</li>
<li>选择你想要导出的合成；</li>
<li>选择你想输出的文件夹；</li>
<li>单击<code>Render</code>按钮；</li>
<li>查看导出的json文件 (如果你有图片或者AI图层在你的动画里，同时也会导出相应imags文件夹)</li>
</ul>
<h3 id="Lottie"><a href="#Lottie" class="headerlink" title="Lottie"></a>Lottie</h3><p>Lottie 支持 Jellybean (API 16) 及以上版本。</p>
<p>将依赖添加到你的工程文件 <code>build.gradle</code> 上</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;  </div><div class="line">  compile <span class="string">'com.airbnb.android:lottie:1.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最简单的使用方法就是在布局文件中添加 LottieAnimationView:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.airbnb.lottie.LottieAnimationView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/animation_view"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">app:lottie_fileName</span>=<span class="string">"hello-world.json"</span></div><div class="line">        <span class="attr">app:lottie_loop</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">app:lottie_autoPlay</span>=<span class="string">"true"</span> /&gt;</div></pre></td></tr></table></figure>
<p>或者你也可以在程序中初始化并在<code>app/src/main/assets</code>中加载json文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LottieAnimationView animationView = (LottieAnimationView) findViewById(R.id.animation_view);</div><div class="line">animationView.setAnimation(<span class="string">"hello-world.json"</span>);</div><div class="line">animationView.loop(<span class="keyword">true</span>);</div></pre></td></tr></table></figure></p>
<p>Lottie也可以支持从网络加载json动画文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LottieAnimationView animationView = (LottieAnimationView) findViewById(R.id.animation_view);</div><div class="line">...</div><div class="line">LottieComposition composition = LottieComposition.fromJson(getResources(), jsonObject, (composition) -&gt; &#123;</div><div class="line">    animationView.setComposition(composition);</div><div class="line">    animationView.playAnimation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>你也可以控制这些动画或者添加监听器：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">animationView.addAnimatorUpdateListener((animation) -&gt; &#123;</div><div class="line">    <span class="comment">// Do something.</span></div><div class="line">&#125;);</div><div class="line">animationView.playAnimation();</div><div class="line">...</div><div class="line"><span class="keyword">if</span> (animationView.isAnimating()) &#123;</div><div class="line">    <span class="comment">// Do something.</span></div><div class="line">&#125;</div><div class="line">...</div><div class="line">animationView.setProgress(<span class="number">0.5f</span>);</div><div class="line">...</div><div class="line"><span class="comment">// Custom animation speed or duration.</span></div><div class="line">ValueAnimator animator = ValueAnimator.ofFloat(<span class="number">0f</span>, <span class="number">1f</span>)</div><div class="line">    .setDuration(<span class="number">500</span>);</div><div class="line">animator.addUpdateListener(animation -&gt; &#123;</div><div class="line">    animationView.setProgress(animation.getAnimatedValue());</div><div class="line">&#125;);</div><div class="line">animator.start();</div><div class="line">...</div><div class="line">animationView.cancelAnimation();</div></pre></td></tr></table></figure></p>
<p>在底层， <code>LottieAnimationView</code> 使用了<code>LottieDrawable</code> 来渲染这些动画。如果你需要，也可以直接使用LottieDrawable类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">LottieDrawable drawable = <span class="keyword">new</span> LottieDrawable();</div><div class="line">LottieComposition.fromAssetFileName(getContext(), <span class="string">"hello-world.json"</span>, (composition) -&gt; &#123;</div><div class="line">    drawable.setComposition(composition);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果你的动画会经常重用,LottieAnimationView内置了一个可选的缓存策略。使用<code>LottieAnimationView#setAnimation(String, CacheStrategy)</code>. CacheStrategy可以为Strong,Weak或者None,来决定LottieAnimationView对动画的引用类型为强引用或弱引用。</p>
<h2 id="已支持的After-Effects动画特性"><a href="#已支持的After-Effects动画特性" class="headerlink" title="已支持的After Effects动画特性"></a>已支持的After Effects动画特性</h2><h3 id="Keyframe-Interpolation→-关键帧插值器"><a href="#Keyframe-Interpolation→-关键帧插值器" class="headerlink" title="Keyframe Interpolation→ 关键帧插值器"></a>Keyframe Interpolation→ 关键帧插值器</h3><hr>
<ul>
<li><p>Linear Interpolation→ 线性插值</p>
</li>
<li><p>Bezier Interpolation→ 贝塞尔插值</p>
</li>
<li><p>Hold Interpolation→ 保持插值</p>
</li>
<li><p>Rove Across Time</p>
</li>
<li><p>Spatial Bezier → 空间贝塞尔</p>
</li>
</ul>
<h3 id="Solids→-固态层"><a href="#Solids→-固态层" class="headerlink" title="Solids→ 固态层"></a>Solids→ 固态层</h3><hr>
<ul>
<li><p>Transform Anchor Point→ 变换锚点</p>
</li>
<li><p>Transform Position → 变换位置</p>
</li>
<li><p>Transform Scale→ 变换缩放</p>
</li>
<li><p>Transform Rotation→ 变换旋转</p>
</li>
<li><p>Transform Opacity→ 变换透明度</p>
</li>
</ul>
<h3 id="Masks→-遮罩"><a href="#Masks→-遮罩" class="headerlink" title="Masks→ 遮罩"></a>Masks→ 遮罩</h3><hr>
<ul>
<li><p>Path→ 路径</p>
</li>
<li><p>Opacity→ 透明度</p>
</li>
<li><p>Multiple Masks (additive)→ 多遮罩 （相加模式）</p>
</li>
</ul>
<h3 id="Track-Mattes→-轨道蒙版"><a href="#Track-Mattes→-轨道蒙版" class="headerlink" title="Track Mattes→ 轨道蒙版"></a>Track Mattes→ 轨道蒙版</h3><hr>
<ul>
<li>Alpha Matte→  Alpha蒙版</li>
</ul>
<h3 id="Parenting→-父级"><a href="#Parenting→-父级" class="headerlink" title="Parenting→ 父级"></a>Parenting→ 父级</h3><hr>
<ul>
<li><p>Multiple Parenting→多重父级</p>
</li>
<li><p>Nulls→空对象</p>
</li>
</ul>
<h3 id="Shape-Layers→形状图层"><a href="#Shape-Layers→形状图层" class="headerlink" title="Shape Layers→形状图层"></a>Shape Layers→形状图层</h3><hr>
<ul>
<li><p>Anchor Point→锚点</p>
</li>
<li><p>Position→位置</p>
</li>
<li><p>Scale→缩放</p>
</li>
<li><p>Rotation→旋转</p>
</li>
<li><p>Opacity→透明度</p>
</li>
<li><p>Path→路径</p>
</li>
<li><p>Group Transforms (Anchor point, position, scale etc)→变换组（锚点，位置，缩放等）</p>
</li>
<li><p>Rectangle (All properties)→矩形（所有属性）</p>
</li>
<li><p>Elipse (All properties)→椭圆（所有属性）</p>
</li>
<li><p>Multiple paths in one group</p>
</li>
</ul>
<h4 id="Stroke-shape-layer-→描边（形状图层）"><a href="#Stroke-shape-layer-→描边（形状图层）" class="headerlink" title="Stroke (shape layer)→描边（形状图层）"></a>Stroke (shape layer)→描边（形状图层）</h4><hr>
<ul>
<li><p>Stroke Color→描边颜色</p>
</li>
<li><p>Stroke Opacity→描边透明度</p>
</li>
<li><p>Stroke Width→描边宽度</p>
</li>
<li><p>Line Cap→线头</p>
</li>
<li><p>Dashes→破折号</p>
</li>
</ul>
<h4 id="Fill-shape-layer-→填充（形状图层）"><a href="#Fill-shape-layer-→填充（形状图层）" class="headerlink" title="Fill (shape layer)→填充（形状图层）"></a>Fill (shape layer)→填充（形状图层）</h4><hr>
<ul>
<li><p>Fill Color→颜色</p>
</li>
<li><p>Fill Opacity→透明度</p>
</li>
</ul>
<h4 id="Trim-Paths-shape-layer-→修剪路径（形状图层）"><a href="#Trim-Paths-shape-layer-→修剪路径（形状图层）" class="headerlink" title="Trim Paths (shape layer)→修剪路径（形状图层）"></a>Trim Paths (shape layer)→修剪路径（形状图层）</h4><hr>
<ul>
<li><p>Trim Paths Start→开始</p>
</li>
<li><p>Trim Paths End→结束</p>
</li>
<li><p>Trim Paths Offset→偏移<br>最后，下面是笔者实现的动画：<br><img src="https://raw.githubusercontent.com/winkstu/file/master/ice.gif" alt="ice.gif"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;_(:3」∠)_&lt;/code&gt;  好紧张，第一次写文章，2017年开工之前收到一篇推送，&lt;a href=&quot;http://mp.weixin.qq.com/s/kMY_QZOR6njO9nLk_ZC6dA&quot;&gt;这个项目碉堡了&lt;/a&gt;。在感叹这个动画库碉堡之余，也想起自己在玩AE（After Effects）的时候也有类似的想法“在AE上编辑的动画直接能再程序用该多啊”。因为笔者之前有关注过motion动画,在AE上做过一些动画，正好可以作为demo，下面就是笔者实践过程。&lt;code&gt;(笑)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="after effects" scheme="http://yoursite.com/tags/after-effects/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/30/hello-world/"/>
    <id>http://yoursite.com/2016/08/30/hello-world/</id>
    <published>2016-08-30T13:57:26.118Z</published>
    <updated>2017-02-09T13:24:22.620Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
